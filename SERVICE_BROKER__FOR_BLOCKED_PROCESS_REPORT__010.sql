/*
	CREATE REQUIRED OBJECTS
*/

DROP TABLE IF EXISTS SB_TESTS.BLOCKED_PROCESS_REPORT_MESSAGES
CREATE TABLE SB_TESTS.BLOCKED_PROCESS_REPORT_MESSAGES
(
	MESSAGE_BODY XML,
	BLOCKED_SQL_BODY NVARCHAR(MAX),
	BLOCKING_SQL_BODY NVARCHAR(MAX),
	MESSAGE_TYPE XML
)

CREATE QUEUE BPR_QUEUE;

CREATE SERVICE BPR_SERVICE ON QUEUE BPR_QUEUE
	([http://schemas.microsoft.com/SQL/Notifications/PostEventNotification]
);

CREATE ROUTE BPR_ROUTE
WITH SERVICE_NAME = 'BPR_SERVICE',
ADDRESS = 'LOCAL';

CREATE EVENT NOTIFICATION BPR_NOTIFICATION ON SERVER
WITH FAN_IN FOR BLOCKED_PROCESS_REPORT
TO SERVICE 'BPR_SERVICE', 'current database';
GO

CREATE OR ALTER PROCEDURE SB_TESTS.USP_BLOCKED_PROCESS_REPORT
AS BEGIN

	DECLARE @MESSAGE_RECIEVED XML;
	DECLARE @MESSAGE_RECIEVED_TYPE sysname;
	
	WAITFOR
	( RECEIVE TOP(1)
	    @MESSAGE_RECIEVED = message_body,
		@MESSAGE_RECIEVED_TYPE = message_type_name
	  FROM BPR_QUEUE
	), TIMEOUT 1000;
	
	IF @MESSAGE_RECIEVED IS NULL
	RETURN

	

	INSERT INTO SB_TESTS.BLOCKED_PROCESS_REPORT_MESSAGES(MESSAGE_BODY, BLOCKED_SQL_BODY, BLOCKING_SQL_BODY, MESSAGE_TYPE)
	SELECT @MESSAGE_RECIEVED,
			@MESSAGE_RECIEVED.value('(/EVENT_INSTANCE/TextData/blocked-process-report/blocked-process/process/inputbuf)[1]', 'NVARCHAR(MAX)'),
			@MESSAGE_RECIEVED.value('(/EVENT_INSTANCE/TextData/blocked-process-report/blocking-process/process/inputbuf)[1]', 'NVARCHAR(MAX)'),
			@MESSAGE_RECIEVED_TYPE
END



ALTER QUEUE BPR_QUEUE
WITH ACTIVATION (
	STATUS = ON,
	PROCEDURE_NAME = SB_TESTS.USP_BLOCKED_PROCESS_REPORT,
	MAX_QUEUE_READERS = 1, -- max insts of this proc running at the same time
	EXECUTE AS OWNER
	);